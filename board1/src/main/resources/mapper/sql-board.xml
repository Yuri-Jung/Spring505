<?xml version="1.0" encoding="UTF-8"?>
<!--mybatis SQL 매핑 파일을 뜻하는 지시문-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--mybatis라는 orm 파일의 sql을 저장 mapper/**/sql-*.xml//// mapper는 폴더명. **는 모든 파일과 모든 폴더를 의미.(spring에서)
sql-*은 sql-의 이름의 모든 파일명(getResources에 s 붙인이유가 여러 파일을 가져오기 위해서) 이 형식에 맞는 파일 모두 가져와라.-->

<!--namespace 속성에 지정한 패키지명을 가지고 있는 파일과 아래의 xml 구문을 연동한다는 의미-->
<!--xml 파일이기 때문에 스프링 프로젝트의 전체 구조를 모르기 때문에 전체 패키지명을 다 입력해야 함!!!!(!아주 중요!!)-->
<mapper namespace="com.bitc.board.mapper.BoardMapper">
<!--    처음부터 완전하게 위치가 동일해야 매치된다.-->

<!--    주의!! 세미콜론 다 빼야 한다.!!-->

<!--    데이터 목록 보기 페이지-->
<!--    실제 sql 쿼리문을 입력하는 부분-->
<!--    id 속성 : 위에서 지정한 파일에 존재하는 매서드명과 동일하게 입력. 오타생기면 못 찾아감. 주의-->
<!--    오버로딩 지원되지 않음. 동일한 이름으로 파일만들면 오류 생긴다.-->

<!--    resultType : 지정한 메서드의 반환값, 자바 기본 타입은 그대로 입력 가능, 사용자가 지정한 데이터 타입은 xml 파일에서
        인식하지 못하기 때문에 전체 패키지 명을 다 입력해야 한다. -->
    <select id="selectBoardList" resultType="com.bitc.board.dto.BoardDto">
<!--        id가 일치해야 하고(동일한 id사용 불가. 오버로딩불가.), -->
        <![CDATA[
        select idx, title, user_id, create_dt, hit_cnt from t_board2
        where deleted_yn = 'N'
        order by idx desc
    ]]>
    </select>

<!--    parameterType : 지정한 메서드의 매개변수가 가지고 있는 데이터 타입, 자바 기본 타입은 그대로 입력, 사용자가 지정한 데이터 타입은
        전체 패키지명을 다 입력해야 함.-->
<!--    변수 선언 : PreparedStatement 방식을 사용하여 지정한 위치에 데이터를 입력하기위해 #{변수명} 형태를 사용
        매개변수가 기본 타입일 경우 mapper 파일의 메서드의 변수명을 그대로 사용 가능-->
<!--    @Param 어노테이션을 사용하여 매개변수의 이름을 지정할 수 있다.-->
<!--    매개변수가 사용자 지정 타입일 경우 해당 타입의 멤버 변수명을 그대로 사용-->
<!--상세글보기-->

    <select id="selectBoardDetail" parameterType="int" resultType="com.bitc.board.dto.BoardDto">
<!--        com.bitc.board.dto.BoardDto - 패키지 전체 주소를 다 입력해줘야 한다.-->
        <![CDATA[
        select idx, title, contents, user_id, create_dt, hit_cnt from t_board2
        where idx = #{idx}
]]>
    </select>

<!--    글 등록 페이지-->
<!--    sql 쿼리문안에서 컬럼명이 각각 달라지는 이유-->
<!--    1. db에서 사용하는 명명법과 자바에서 사용하는 명명법이 다름. db에서는 전부 소문자를 사용하고 단어 두개가 붙는다면 '-'을
        사용하는 것이 기본.(snake 명명법) -->
<!--    2. application.properties를 통해서 카멜 명명법을 사용한다고 설정-->
<!--    3. parameterType, resultType에 java dto class를 사용한다고 설정했기 때문에 해당 클래스의 멤버 변수명을 사용-->
<!--    4. mapper 파일에서 @Param 어노테이션을 사용하여 변수명을 설정할 경우 해당 변수명을 사용해야 함-->
    <insert id="insertBoard" parameterType="com.bitc.board.dto.BoardDto">
        <![CDATA[
        insert into t_board2 (title, contents, pwd, user_id, create_dt)
--         쿼리문이기 때문에 쿼리문 그대로 사용해야 한다.
        values (#{title}, #{contents},'1234', #{userId}, now())
--          boardDto 타입에서 가져오기 때문에 그에 맞춰 자바형식으로 가져온다. 그렇지만 application.properties에 설정을 해놨기 때문에
--          가능한 것이다.
]]>
    </insert>

    <update id="updateBoard" parameterType="com.bitc.board.dto.BoardDto">
        <![CDATA[
        update t_board2 set title = #{title}, contents = #{contents}, update_dt = now()
        where idx = #{idx}
            ]]>
    </update>

<!--    삭제페이지-->
    <update id="deleteBoard" parameterType="int">
        <![CDATA[
        update t_board2 set deleted_yn = 'Y'
        WHERE idx = #{idx}
            ]]>
    </update>

<!--    조회수 올리기-->
    <update id="updateHitCount" parameterType="int">
        <![CDATA[
        update t_board2 set hit_cnt = hit_cnt + 1
        where idx = #{idx}
        ]]>
    </update>
</mapper>